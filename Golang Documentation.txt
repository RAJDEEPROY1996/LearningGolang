What is Go?
    - Go is a cross-platform, open source programming language
    - Go can be used to create high-performance applications
    - Go is a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language
    - Go was developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson in 2007
    - Go's syntax is similar to C++

What is Go Used For?
    - Web development (server-side)
    - Developing network-based programs
    - Developing cross-platform enterprise applications
    - Cloud-native development

Why Use Go?
    - Go is fun and easy to learn
    - Go has fast run time and compilation time
    - Go supports concurrency
    - Go has memory management
    - Go works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc)

Go Compared to Python and C++
    Go                                                          Python                                                        C++
Statically typed 	                                            Dynamically typed 	                                          Statically typed
Fast run time 	                                                Slow run time                                                 Fast run time
Compiled 	                                                    Interpreted 	                                              Compiled
Fast compile time 	                                            Interpreted 	                                              Slow compile time
Supports concurrency through goroutines and channel 	        No built-in concurrency mechanism 	                          Supports concurrency through threads
Has automatic garbage collection 	                            Has automatic garbage collection 	                          Does not have automatic garbage collection
Does not support classes and objects 	                        Has classes and objects 	                                  Has classes and objects
Does not support inheritance 	                                Supports inheritance 	                                      Supports inheritance

Notes:
    - Compilation time refers to translating the code into an executable program
    - Concurrency is performing multiple things out-of-order, or at the same time, without affecting the final outcome
    - Statically typed means that the variable types are known at compile time

Go Get Started: To start using Go, we need two things:
    - A text editor, like VS Code, to write Go code
    - A compiler to translate the Go code into a language that the computer will understand

Go Install: We can find the relevant installation files at https://golang.org/dl/.

    Follow the instructions related to your operating system. To check if Go was installed successfully, we can run the following command in a terminal window:
                go version
    which should show the version of your Go installation.

Go Install IDE - An IDE (Integrated Development Environment) is used to edit AND compile the code.

    Popular IDE's include Visual Studio Code (VS Code), Vim, Eclipse, and Notepad. These are all free, and they can be used to both edit and debug Go code.

Note: Web-based IDE's can work as well, but functionality is limited.

    We will use VS Code in our tutorial, which we believe is a good place to start. We can find the latest version of VS Code at https://code.visualstudio.com/.

Go Quickstart - Let's create our first Go program.
    - Launch the VS Code editor
    - Open the extension manager or alternatively, press Ctrl + Shift + x
    - In the search box, type "go" and hit enter
    - Find the Go extension by the GO team at Google and install the extension
    - After the installation is complete, open the command palette by pressing Ctrl + Shift + p
    - Run the Go: Install/Update Tools command
    -Select all the provided tools and click OK
    - VS Code is now configured to use Go.
    - Open up a terminal window and type:
            go mod init example.com/hello
    - Create a new file (File > New File). Copy and paste the following code and save the file as helloworld.go (File > Save As).
    - Now, run the code: Open a terminal in VS Code and type: 
            go run .\1HelloWorld.go 
    - If you want to save the program as an executable, type and run:
             go build .\1HelloWorld.go

Go Syntax - A Go file consists of the following parts:
    - Package declaration
    - Import packages
    - Functions
    - Statements and expressions

Note: In Go, any executable code belongs to the main package.

Go Statements - fmt.Println("Hello World!") is a statement.
    - In Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon ";".
    - Hitting the Enter key adds ";" to the end of the line implicitly (does not show up in the source code).
    - The left curly bracket { cannot come at the start of a line.


Go Compact Code: We can write more compact code, like shown below (this is not recommended because it makes the code more difficult to read
    package main; import ("fmt"); func main() { fmt.Println("Hello World!");}

Go Comments - 
    - A comment is a text that is ignored upon execution.
    - Comments can be used to explain the code, and to make it more readable.
    - Comments can also be used to prevent code execution when testing an alternative code.
    - Go supports single-line or multi-line comments.    

Go Single-line Comments - 
    - Single-line comments start with two forward slashes (//).
    - Any text between // and the end of the line is ignored by the compiler (will not be executed).

Go Multi-line Comments -
    - Multi-line comments start with /* and ends with */.
    - Any text between /* and */ will be ignored by the compiler.

Tip: It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer comments.

Comment to Prevent Code Execution -
    - We can also use comments to prevent the code from being executed.
    - The commented code can be saved for later reference and troubleshooting.

Go Variables - Variables are containers for storing data values.

Go Variable Types - In Go, there are different types of variables, for example:
    int- stores integers (whole numbers), such as 123 or -123
    float32- stores floating point numbers, with decimals, such as 19.99 or -19.99
    string - stores text, such as "Hello World". String values are surrounded by double quotes
    bool- stores values with two states: true or false

Declaring (Creating) Variables - 
    - In Go, there are two ways to declare a variable:
        1. With the var keyword:
            Use the var keyword, followed by variable name and type:
                var variablename type = value
        Note: You always have to specify either type or value (or both).
        
        2. With the := sign:
            Use the := sign, followed by the variable value:
                variablename := value
        Note: In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value).

Note: It is not possible to declare a variable using :=, without assigning a value to it.

Variable Declaration With Initial Value - If the value of a variable is known from the start, we can declare the variable and assign a value to it on one line:
    - var student1 string = "John" //type is string
    - var student2 = "Jane" //type is inferred
    - x := 2 //type is inferred

Variable Declaration Without Initial Value - In Go, all variables are initialized. So, if we declare a variable without an initial value, its value will be set to the default value of its type:
    - var a string
    - var b int
    - var c bool

Value Assignment After Declaration - It is possible to assign a value to a variable after it is declared. This is helpful for cases the value is not initially known.
    - var student1 string
    - student1 = "John"

Note: It is not possible to declare a variable using ":=" without assigning a value to it.

Difference Between var and :=

There are some small differences between the var and := 
var 	                                                            :=
Can be used inside and outside of functions 	                                Can only be used inside functions
Variable declaration and value assignment can be done separately 	            Variable declaration and value assignment cannot be done separately (must be done in the same line)

